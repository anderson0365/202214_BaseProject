{
	"info": {
		"_postman_id": "bd5da7fd-d52c-4fc8-b0c7-6bf60cd68ba3",
		"name": "Products-Stores",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20335469"
	},
	"item": [
		{
			"name": "Add a product (Test Precondition)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.collectionVariables.set(\"product_id\", data.id);",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"onion\",\n    \"price\": 1500,\n    \"type\": \"perishable\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": [
				{
					"name": "Add a product",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"onion\",\n    \"price\": 1500,\n    \"type\": \"fruit\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "93"
						},
						{
							"key": "ETag",
							"value": "W/\"5d-ja4/qRiBwEXz2UVYlJGm5kVTsXw\""
						},
						{
							"key": "Date",
							"value": "Sat, 17 Sep 2022 21:53:03 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"name\": \"onion\",\n    \"price\": 1500,\n    \"type\": \"perishable\",\n    \"id\": \"ebb57e4a-3422-44a2-bb34-480287afacb9\"\n}"
				}
			]
		},
		{
			"name": "Add a store (Test Precondition)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.collectionVariables.set(\"store_id\", data.id);",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Omega\",\n    \"city\": \"BOG\",\n    \"address\": \"Calle 50c #22-38\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stores"
					]
				}
			},
			"response": [
				{
					"name": "Add a store",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Omega\",\n    \"city\": \"BOG\",\n    \"address\": \"Calle 50c #22-38\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/stores",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stores"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "102"
						},
						{
							"key": "ETag",
							"value": "W/\"66-p5bI93fdoPvmHkFr4f4AtnKp6z8\""
						},
						{
							"key": "Date",
							"value": "Sat, 17 Sep 2022 23:42:32 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"name\": \"Omega\",\n    \"city\": \"BOG\",\n    \"address\": \"Calle 50c #22-38\",\n    \"id\": \"4d7c0d89-8b12-4f85-81a1-083c86577484\"\n}"
				}
			]
		},
		{
			"name": "Add a store 2 (Test Precondition)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.collectionVariables.set(\"store_id_2\", data.id);",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Pekin\",\n    \"city\": \"MED\",\n    \"address\": \"Calle 23 #14-15\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stores"
					]
				}
			},
			"response": [
				{
					"name": "Add a store",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Omega\",\n    \"city\": \"BOG\",\n    \"address\": \"Calle 50c #22-38\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/stores",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stores"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "102"
						},
						{
							"key": "ETag",
							"value": "W/\"66-p5bI93fdoPvmHkFr4f4AtnKp6z8\""
						},
						{
							"key": "Date",
							"value": "Sat, 17 Sep 2022 23:42:32 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"name\": \"Omega\",\n    \"city\": \"BOG\",\n    \"address\": \"Calle 50c #22-38\",\n    \"id\": \"4d7c0d89-8b12-4f85-81a1-083c86577484\"\n}"
				}
			]
		},
		{
			"name": "Add store to a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.test(\"Status code is 201\", function () {",
							"   pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{product_id}}/stores/{{store_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Add store to a product",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{product_id}}/stores/{{store_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores",
								"{{store_id}}"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "207"
						},
						{
							"key": "ETag",
							"value": "W/\"cf-9pxJ4zipI5gnPONFi6Br2KR8W4s\""
						},
						{
							"key": "Date",
							"value": "Sat, 17 Sep 2022 23:52:06 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"df95a6e5-7872-4bcc-900d-801cb0d476ea\",\n    \"name\": \"onion\",\n    \"price\": 1500,\n    \"type\": \"perishable\",\n    \"stores\": [\n        {\n            \"id\": \"da8b49ad-e4c4-4d01-a3e3-dc8501c30f99\",\n            \"name\": \"Omega\",\n            \"city\": \"BOG\",\n            \"address\": \"Calle 50c #22-38\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Add an invalid store to a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The store with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{product_id}}/stores/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": [
				{
					"name": "Add an invalid store to a product",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{product_id}}/stores/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "72"
						},
						{
							"key": "ETag",
							"value": "W/\"48-LSYh1QNtMBw2KSVOn5NwCFb2JCg\""
						},
						{
							"key": "Date",
							"value": "Sat, 17 Sep 2022 23:56:20 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The store with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Get all stores of a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Number of museums > ' + 0, function () {",
							"   var data = pm.response.json()",
							"   pm.expect(data.length).to.greaterThan(0)",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{product_id}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores"
					]
				}
			},
			"response": [
				{
					"name": "Get all stores of a product",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{product_id}}/stores",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "104"
						},
						{
							"key": "ETag",
							"value": "W/\"68-y2m62xkDC1MsA40gL6tPnY6jvv0\""
						},
						{
							"key": "Date",
							"value": "Sun, 18 Sep 2022 00:09:53 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"id\": \"117ac013-00cb-49af-a161-523638de4ddf\",\n        \"name\": \"Omega\",\n        \"city\": \"BOG\",\n        \"address\": \"Calle 50c #22-38\"\n    }\n]"
				}
			]
		},
		{
			"name": "Get a store of a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{product_id}}/stores/{{store_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Get a store of a product",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{product_id}}/stores/{{store_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores",
								"{{store_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "102"
						},
						{
							"key": "ETag",
							"value": "W/\"66-uHaDDuVFxngxvQ7TrUYs30Z9jvM\""
						},
						{
							"key": "Date",
							"value": "Sun, 18 Sep 2022 00:12:17 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"117ac013-00cb-49af-a161-523638de4ddf\",\n    \"name\": \"Omega\",\n    \"city\": \"BOG\",\n    \"address\": \"Calle 50c #22-38\"\n}"
				}
			]
		},
		{
			"name": "Get a store of a invalid product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The product with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/00000000-0000-0000-0000-000000000000/stores/{{store_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"00000000-0000-0000-0000-000000000000",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Get a store of a invalid product",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/00000000-0000-0000-0000-000000000000/stores/{{store_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"00000000-0000-0000-0000-000000000000",
								"stores",
								"{{store_id}}"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "74"
						},
						{
							"key": "ETag",
							"value": "W/\"4a-iQTKaPdZ40YdwkVyKYlmEufUk5M\""
						},
						{
							"key": "Date",
							"value": "Sun, 18 Sep 2022 00:40:18 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The product with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Update stores of a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    \"{{store_id_2}}\"\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/{{product_id}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores"
					]
				}
			},
			"response": [
				{
					"name": "Update stores of a product",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"{{store_id_2}}\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/{{product_id}}/stores",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "220"
						},
						{
							"key": "ETag",
							"value": "W/\"dc-8dB+Nj8XZOiSEuKvxKBJ6fXtinc\""
						},
						{
							"key": "Date",
							"value": "Sun, 18 Sep 2022 00:44:38 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"5b4a8b87-d732-4a5e-a7f1-1f2ac06fb8c2\",\n    \"name\": \"onion\",\n    \"price\": 1500,\n    \"type\": \"perishable\",\n    \"stores\": [\n        {\n            \"id\": \"52326596-4e1c-48d1-b2c6-c77670c13b32\",\n            \"name\": \"Pekin\",\n            \"city\": \"MED\",\n            \"address\": \"Calle 23 #14-15\",\n            \"products\": []\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Update with an invalid store the sores of a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The store with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    \"00000000-0000-0000-0000-000000000000\"\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/{{product_id}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores"
					]
				}
			},
			"response": [
				{
					"name": "Update with an invalid store the sores of a product",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    \"00000000-0000-0000-0000-000000000000\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/{{product_id}}/stores",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "72"
						},
						{
							"key": "ETag",
							"value": "W/\"48-LSYh1QNtMBw2KSVOn5NwCFb2JCg\""
						},
						{
							"key": "Date",
							"value": "Sun, 18 Sep 2022 00:51:09 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The store with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Delete a store from a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"   pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{product_id}}/stores/{{store_id_2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id_2}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete a store from a product",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{product_id}}/stores/{{store_id_2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores",
								"{{store_id_2}}"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Date",
							"value": "Sun, 18 Sep 2022 00:53:26 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Delete a store who not belog to a product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {",
							"   pm.response.to.have.status(412);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The store with the given id is not associated to the product\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/{{product_id}}/stores/{{store_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete a store from a product",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{product_id}}/stores/{{store_id_2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores",
								"{{store_id_2}}"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Date",
							"value": "Sun, 18 Sep 2022 00:53:26 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": null
				},
				{
					"name": "Delete a store who not belog to a product",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{product_id}}/stores/{{store_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{product_id}}",
								"stores",
								"{{store_id}}"
							]
						}
					},
					"status": "Precondition Failed",
					"code": 412,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "91"
						},
						{
							"key": "ETag",
							"value": "W/\"5b-Jn5Yb/+YzBtPM179ZC6w5Re9ziU\""
						},
						{
							"key": "Date",
							"value": "Sun, 18 Sep 2022 00:54:44 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 412,\n    \"message\": \"The store with the given id is not associated to the product\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api/v1",
			"type": "string"
		},
		{
			"key": "product_id",
			"value": ""
		},
		{
			"key": "store_id",
			"value": ""
		},
		{
			"key": "store_id_2",
			"value": ""
		}
	]
}